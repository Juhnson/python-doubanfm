#!/usr/bin/python
# encoding=utf-8

import argparse
import os
import os.path
import sys
import socket

import doubanfm.util

parser = argparse.ArgumentParser(description="命令行的 豆瓣FM ，\
        可以使用 Firecookie(firefox 的插件) 导出的 cookie 文件，\
        文件路径为 %s " % doubanfm.util.cookiefile)

parser.add_argument('-s', '--server', action='store', 
        nargs='?', const='play', choices=('play', 'unplay'), dest='server', 
        help="启动服务，play 表示开始播放，unplay  表示仅启动服务\
                默认为 play")
parser.add_argument('-U', '--unplay-server', action='store_const', 
        const=2, dest='server', help="仅启动服务")

parser.add_argument('-p', '--play', action='store_const', 
        const='play', dest="cmd", help="播放")
parser.add_argument('-P', '--pause', action='store_const', 
        const='pause', dest="cmd", help="暂停")
parser.add_argument('-G', '--toggle-pause', action='store_const', 
        const='togglePause', dest="cmd", help="播放/暂停")

parser.add_argument('-n', '--next', action='store',
        nargs='?', const=0, type=int, 
        help="下一首歌曲，可以指定播放第 n 首歌曲，\
                如果 n 为 0 ，则会获取新的歌曲列表，\
                这是 豆瓣FM 默认的行为，如果不指定 n 默认为 0")

parser.add_argument('-f', '--favourite', action='store_const', 
        const='favourite', dest="cmd", help="喜欢")
parser.add_argument('-u', '--unfavourite', action='store_const', 
        const='unFavourite', dest="cmd", help="不喜欢")
parser.add_argument('-F', '--toggle-favourite', action='store_const', 
        const='toggleFavourite', dest="cmd", help="喜欢/不喜欢")

parser.add_argument('-i', '--info', action='store_const',
        const='info', dest='cmd', help="当前歌曲信息")
parser.add_argument('-l', '--list', action='store_const',
        const='list', dest='cmd',  help="歌曲列表")

parser.add_argument('-x', '--exit', action='store_const', 
        const='exit', dest="cmd", help="关闭服务")

args = parser.parse_args()

def serverHasStart():
    socketfile = doubanfm.util.socketfile
    return os.path.exists(socketfile)

def getsocket():
    socketfile = doubanfm.util.socketfile
    s = socket.socket(socket.AF_UNIX)
    s.connect(socketfile)
    return s

def sendcmd(cmd, waitReply, *args):
    s = getsocket()
    f = s.makefile('rw')
    f.write(cmd)
    f.write(' ')
    f.write(' '.join(map(str, args)))
    f.write('\n')
    f.flush()
    if waitReply:
        result, message = doubanfm.util.readReplyLine(f)
        if 'OK' == result:
            return
        elif 'FAIL' == result or 'ERROR' == result:
            print result, message
        elif 'VALUE' == result:
            value = doubanfm.util.readUtilEOFLine(f, message)
            print value.rstrip()
        else:
            print 'UNKNOW REPLY %s %s' % (result, message)
    s.close()


if args.server:
    if serverHasStart():
        print '服务已经启动，如果服务并未启动请执行 rm %s' % doubanfm.util.socketfile
        sys.exit()
    play = True
    if args.server == 'unplay':
        play = False
    if not os.fork():
        # pyglet 使用 avbin 解析 mp3 文件，它是 c 的库
        # 它在解析 mp3 时会向标准错误输出一些信息
        # 无论是改变 sys.stderr 还是 sys.__stderr__
        # 都无法重定向这些输出，只好在调用的时候重定向了
        # 
        # fm -s 2>/dev/null
        #
        stdout = doubanfm.util.stdout
        stderr = doubanfm.util.stderr
        doubanfm.util.initParent(stdout)
        doubanfm.util.initParent(stderr)
        sys.stdout = open(stdout, 'w')
        sys.stderr = open(stderr, 'w')
        import doubanfm.listening
        doubanfm.listening.start(play)
elif args.next is not None:
    if serverHasStart():
        index = int(args.next)
        index = max(0 , index)
        sendcmd('next', False, index)
    else:
        print >>sys.stderr, '服务尚未启动'
elif args.cmd:
    if serverHasStart():
        if args.cmd == 'info' or args.cmd == 'list':
            sendcmd(args.cmd, True)
        else:
            sendcmd(args.cmd, False)
    else:
        print >>sys.stderr, '服务尚未启动'
else:
    parser.print_help()

